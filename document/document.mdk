[INCLUDE=presentation]
Title         : Justification Logic
Sub Title     : A Curry- Howard View
Title Note    : Dissertation Proposal &nbsp; &date;
Author        : Konstantinos Pouliasis
Affiliation   : The Graduate Center, CUNY
Email         : konstantinos.pouliasis@gmail.com
Reveal Theme  : solarized
Beamer Theme  : madrid
Package     : mathpartir.sty
Package       : mathtools
Bib style     : plainnat
Bibliography           : secondexam.bib

[TITLE]



#Introduction
 
## CURRY--HOWARD ISO [@curry1934functionality;@howard1995formulae]

* sparked from the investigation of the connection of explicit proofs in intuitionistic logic and programs of a simple programming 
language with simple types 

* central topic of study in the field of type theory 

* standard theoretical tool for  studying and designing programming languages  

## Curry--Howard in logic
* a new paradigm in logic studies that emphasizes _proof relevance_

* _ scales_ : the isomorphism holds for more complex logics and 
  correspondingly captures complex programming language constructs.  

* We use  _proofs-as-programs_(-as-morphisms) and __CHI__ interchangeably.

* The relation of proofs, programs and categories (morphisms)  has renewed interest in foundations (HoTT)

## Roadmap of this presentation
 * Basic concepts and (scalable) proof techiques of __CHI__ 
 
      * intuitionistic propositional logic (__IPL__)/ simply typed lambda calculus (__STLC__)
 
 * Basic concepts and results of _Justification Logic_ (__JL__)
 
 * Exploring a Curry-Howard reading of basic __JL__
  

# IPL and STLC 


## Intuitionism and constructive mathematics

  * Notion of truth collides with the notion of proof 

  * Continuation of Brouwer's program 

  * Mathematical reasoning and logic  is a human faculty

  * The creative subjects use mathematical language to as a means to 
express  their reasoning (proof) constructs   
  * There  are open problems 
  
  * Propositions do not come with a pre-existing truth value




## Intuitionism and constructive mathematics

 * Proofs are stand alone objects

 * NOT godelizations of some fixed formal system

 * Mathematical objects such as __Nat__ together the primitive recursive function space
 are  obtained as models of (proof objects) of equational proof theories 
 * (e.g. a typed version of Godel's __T__ in the case of __Nat__ with primitive recursion). 

## Logic within constructive mathematics
 * The object of logic is the study of "sane" proof constructs independently of formal systems

 * The traditional chasm between "syntax" and "semantics" is no longer that very fruitful
  at least when "engineering" new logics.

 * "The meaning of a connective is the ways that one can prove it " (Martin Lof - Verificationist approach)

 * "The meaning of a connective is the way one can use its proofs" (Pragmatist approach)

# Natural Deduction ( JUDGMENTALY)
## Judgments
* Logic defines _judgments_
* In propositional logic   __judgments__ have subjects of  two kinds:
  * $A\  {\sf Prop}$: $A$ is in the universe of discourse
  * $A\  {\sf true}$ : $A$ has a proof
* $A\  {\sf Prop}$: can be replaced with a context free grammar in the propositional case.
But in general that's not the case. E.g. $\forall x. A(x)$ is not even a type whereas $\forall x:B. A(x)$
is only when $x:A\vdash B(x):{\sf Prop}$
* We will be ignoring type formation (${\sf Prop}$) judgments for now. 

~ Begin Vertical


## Hypotheticals

Judgment construction can be presented in tree form 

~ Math
  
  {\begin{array}{c}
  {J_1 \ldots J_i}  \\
  \vdots \\
  {J} 
  \end{array} } 
~ 


* the root is the deduced judgment

* and leafs are hypothesized judgments


## Hypotheticals
  * we will be concerned with $J$ of the form ${\sf A \ true}$
  * hypotheses will be labeled 
  * labels ${\sf true}$ are also inferrable
  
  ~ Math
  
  {\begin{array}{c}
  {x_1:A_1  \ldots x_i: A_i}  \\
  \vdots \\
  {A } 
  \end{array} } 
~ 
~ End Vertical



##Inference: Hypotheses
 Hypothesis can be trivially reflected 
 
  ~ Math 
    {\text For\  } k \in [1\ldots i] 
  ~
  ~ Math
  {\begin{array}{c}
  {x_1:A_1  \ldots x_i: A_i}  \\
  \vdots \\
  {A_{k}} 
  \end{array} } 
  ~


## Inference: Conjunction Intro

   ~ Math
  \inferrule*[right=Intro] {
 {\begin{array}{c}
  \vdots \\
  {A} 
  \end{array} } \\{\begin{array}{c}
  \vdots \\
  {B} 
  \end{array} }} {A\wedge B}
  ~

## Inference: Conjunction Elim
  
  ~ Math
  \inferrule*[right=Elim2] {A\wedge B} {B}
  ~



[BIB]


