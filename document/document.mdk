[INCLUDE=presentation]
Title         : Justification Logic
Sub Title     : A Curry- Howard View
Title Note    : Amazon JFK presentation
Author        : Konstantinos Pouliasis
Affiliation   : The Graduate Center, City Univesity of New York
Email         : pouliasi@amazon.com, konstantinos.pouliasis@gmail.com, 
Reveal Theme  : solarized
Beamer Theme  : madrid
Package     : mathpartir.sty
Package       : mathtools
Bib style     : plainnat
Bibliography: presentation.bib

[TITLE]



#Introduction
 
## CURRY--HOWARD ISO 

* the connection of  proofs constructs in intuitionistic logic and programs of simple typed lambda calculus 

* central topic of study in the field of type theory 

* standard theoretical tool for  study, design  and prototyping programming languages  

## Curry--Howard in logic
* a new paradigm in logic studies that emphasizes _proof relevance_

* _ scales_ : the isomorphism holds for more complex logics and 
  correspondingly captures complex programming language constructs.  

* We use  _proofs-as-programs_(-as-morphisms) and __CHI__ interchangeably.

* The relation of proofs, programs and categories (morphisms)  has renewed interest in foundations (HoTT)

## Roadmap of this presentation
 * Concepts and scalable proof techiques of __CHI__ 
 
      * intuitionistic propositional logic (__IPL__)/ simply typed lambda calculus (__STLC__)
 
 *  My work on exploring a Curry-Howard reading of basic _Justification Logic_(__JL__) and its programmistic
 interpretation
  

# IPL and STLC 


## Intuitionism and constructive mathematics

  * Notion of truth collides with the notion of proof 

  * Continuation of Brouwer's program 

  * Mathematical reasoning -- and logic -- is a human faculty

  * The creative subjects use mathematical language to as a means to 
express  their reasoning (proof) constructs   

  * Propositions do not come with a pre-existing truth value: There are open problems!




## Intuitionistic/ type theoretic Foundations 

 * Proofs are stand alone objects and not metamathematical constructions

 * NOT strings, sequences or godelizations of some _fixed_ formal system

 * Mathematical objects such as __Nat__ with the primitive recursive function space
 are  obtained as models of (proof objects) for equational proof theories 
 
 * (e.g. a typed version of Godel's __T__ in the case of __Nat__ with primitive recursion). 

## Logic within intuitionism

 * The object of logic is the study of "sane" proof constructs

 * The traditional chasm between "syntax" and "semantics" is no longer  very fruitful idea
  at least when "engineering" new logics.

 * "The meaning of a connective is the ways that one can prove it " (Martin Lof - Verificationist approach)


# Natural Deduction and judgments

## Judgments

* Logic defines _judgments_ ("sane" deductions in a specific domain)

* In intuitionistic propositional logic (__IPL__)   __judgments__ we have judgments of two  kinds:
  * $A\  {\sf Prop}$: $A$ is in the universe of propositions
  * $A\  {\sf true}$ : $A$ has a proof

* Other logics implement different judgments/ modalities (e.g.  ${\sf A \ true \ at \ t}$ )




## Hypotheticals

Judgment construction can be presented in tree form 

~ Math
  
  {\begin{array}{c}
  {J_1 \ldots J_i}  \\
  \vdots \\
  {J} 
  \end{array} } 
~ 


the root ($J$) is the deduced judgment

and leafs (   ${J_1 \ldots J_i}$) are hypothesized judgments


## Hypotheticals
  * we will be concerned with $J$ of the form ${\sf A \ true}$
  
  * hypotheses are  labeled with unique tags 
  
  * since we focus only on judgments   we will omit the "kinding"
  and write simply $A$.




##Rules of Inference: Hypotheses
 Hypotheses can be trivially reflected. I.e.  

 
  ~ Math
  {\begin{array}{c}
    {\text For\  } k \in [1\ldots i]\\
    \\
  {x_1:A_1  \ldots x_i: A_i}  \\
  \vdots \\
  {A_{k}} 
  \end{array} } 
  ~


## Inference: Conjunction

   ~ Math
  \inferrule*[right=Intro] {
 {\begin{array}{c}
  \vdots \\
  {A} 
  \end{array} } \\{\begin{array}{c}
  \vdots \\
  {B} 
  \end{array} }} {A\wedge B}
  ~


  ~ Math
    \begin{array}{c c}
  \inferrule*[right=Elim1] {
 {\begin{array}{c}
   \\
  \vdots \\
  {A\wedge B} 
  \end{array} }} {A} & \inferrule*[right=Elim2] {
 {\begin{array}{c}
   \\
  \vdots \\
  {A\wedge B} 
  \end{array} }} {A}
  \end{array}
  ~

## Equality and Harmony

Proof trees are objects of logic and - as mathematical objects -  are equipped with _equality_

~ Center
__Logic is algebrized__
~

Equalities should provide for the "harmony" of the Introduction 
-- Elimination constructions-- destructions

## Harmony in Slogans

~ Center
["Elimination Rules are not too strong"]{ color=red }
~
Introducing  a connective just to eliminate it won't give anything new. 

~ Center
["Elimination Rules are not too weak"]{ color=blue }
~
 You should have "enough" elimination techniques to reintroduce a connective using introductions.

~Begin Vertical
## Harmony Conjunction

~Center 
Local Soundness 
~
  ~ Math
    \begin{array}{l c r}
  {\inferrule*[right=Elim1]{\inferrule*[right=Intro] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A} 
  \end{array} } \\{\begin{array}{c}
  \mathcal{E} \\
  {B} 
  \end{array} }} {A\wedge B}}{A}} & = &   
   {\begin{array}{c}
  \mathcal{D}\\
  {A} 
  \end{array} }
  \end{array}
  ~ 


## Harmony Conjunction
~Center 
Local Soundness 
~
  ~ Math
    \begin{array}{l c r}
  {\inferrule*[right=Elim2]{\inferrule*[right=Intro] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A} 
  \end{array} } \\{\begin{array}{c}
  \mathcal{E} \\
  {B} 
  \end{array} }} {A\wedge B}}{B}} & = &   
   {\begin{array}{c}
  \mathcal{E}\\
  {A} 
  \end{array} }
  \end{array}
  ~ 

## Harmony Conjunction
~ Center
Local Completeness
~

 ~ Math
\begin{array}{l c r}
   {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } & =  &  {\inferrule*[right=Intro]{{\inferrule*[right=Elim1] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } } {A}}\\
  {\inferrule*[right=Elim2] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } } {B}}}{A\wedge B}}
  \end{array}
  ~ 
~ End Vertical

## Top
$0$-ary conjunction

~ Math
\inferrule*[right=Intro]{ }{\top}
~

No elimination rule: You cannot extract any data from no data!

Local Soundess trivial (no elim)

Local Completeness:
~ Math
\begin{array}{l c r}
\inferrule*[right=Intro]{\mathcal{D} }{\top} & = & \inferrule*[right=Intro]{}{\top} 
\end{array}
~



## Implication

As conjunctions internalize "pairing", implication internalizes hypothetical reasoning.

~ Math
  \begin{array}{c}
 {\inferrule*[right=Intro] {
 {\begin{array}{c}
  x_1:A_i \ldots \overline{x:A}\\
  \vdots \\
  {B} 
  \end{array} } } {A\supset B}} 
 \\
 \\
 {\inferrule*[right=Elim] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A\supset B} 
  \end{array} }\\ {\begin{array}{c}
  \mathcal{E}\\
  {A} 
  \end{array} } } {B}}
 \end{array}
~


## Harmony: Implication

~ Center 
  Local Soundness
~

~ Math
  \begin{array}{c c c}
  {\inferrule*{
{\inferrule*[right=Intro]
{
 {\begin{tabular}[b]{c}
 $\overline{x:A}$
  \\
  $\mathcal{D}$
  \\
  $B$
 \end{tabular}} \\
 \\
}
{A\supset B}}\\{\begin{tabular}[b]{c}
  $\mathcal{E}$
  \\
  $A$
 \end{tabular}}} {B}} & = & {\begin{tabular}[b]{c}
  $\mathcal{E}$
  \\
  $A$
  \\
  $\mathcal{D}$\\
  $B$
\end{tabular}}
 \end{array}
~





## Harmony : Implication

~ Center 
  Local Completeness
~

~ Math
	\begin{array}{c c c}
    {\begin{array}[b]{c}  {\mathcal{D}} \\ A\supset B  \end{array}} & = &
		{\inferrule{
				{\inferrule[]{
						{\begin{array}[b]{c}  {\mathcal{D}} \\ A\supset B  \end{array}}\\{\overline{x:A}}} { B }}}{A \supset B}
			}
		
		
		
	\end{array}
~
~ Begin Vertical
## Disjunction

~ Math
\begin{array}{l c}
  \inferrule*[right=intro1]{A}{A\vee B} &   \inferrule*[right=intro2]{B}{A\vee B}\\
\\
\inferrule*[right=elim$^{x,y}$] {{\begin{tabular}[b]{c}
  $\mathcal{D}$
  \\
  $A\vee B$
 \end{tabular}}\\ 
  { {\begin{tabular}[b]{c}
 $\overline{x:A}$
  \\
  $\mathcal{E}$
  \\
  $C$
 \end{tabular}}}\\
  { {\begin{tabular}[b]{c}
 $\overline{y:B}$
  \\
  $\mathcal{F}$
  \\
  $C$
 \end{tabular}}}}{C}
 \end{array}
~

## Disjunction: Harmony

~ Center
Local Soundness
~

~ Math
\begin{array}{l c r }
\inferrule*[right=elim$^{x,y}$] {{\begin{tabular}[b]{c}
  $\mathcal{D}$
  \\
  $A$\\
  \hline 
  $A\vee B$
 \end{tabular}}\\ 
  { {\begin{tabular}[b]{c}
 $\overline{x:A}$
  \\
  $\mathcal{E}$
  \\
  $C$
 \end{tabular}}}\\
  { {\begin{tabular}[b]{c}
 $\overline{y:B}$
  \\
  $\mathcal{F}$
  \\
  $C$
 \end{tabular}}}}{C} &=& {\begin{tabular}[b]{c}
 $\mathcal{D}$\\
 $A$\\
 $\mathcal{E}$\\
  $C$
 \end{tabular}}
\end{array}
~



## Disjunction: Harmony
~ Center
Local Soundness
~
~ Math
\begin{array}{l c r }
\inferrule*[right=elim$^{x,y}$] {{\begin{tabular}[b]{c}
  $\mathcal{D}$
  \\
  $B$\\
  \hline 
  $A\vee B$
 \end{tabular}}\\ 
  { {\begin{tabular}[b]{c}
 $\overline{x:A}$
  \\
  $\mathcal{E}$
  \\
  $C$
 \end{tabular}}}\\
  { {\begin{tabular}[b]{c}
 $\overline{y:B}$
  \\
  $\mathcal{F}$
  \\
  $C$
 \end{tabular}}}}{C} &=& {\begin{tabular}[b]{c}
 $\mathcal{D}$\\
 $B$\\
 $\mathcal{F}$\\
  $C$
 \end{tabular}}
\end{array}
~

## Disjunction: Harmony

~ Center
Local Completeness
~

~ Math
\begin{array}{c c}
  {\begin{array}{c}  \\ \inferrule*{\mathcal{D}}{A\vee B} \end{array}} & =
\end{array}
~

~ Math
\begin{array}{c r}
  \\
\inferrule*[right=E$^{\overline{x},\overline{y}}$] {
  {\begin{array}{c}  \\ \inferrule*{\mathcal{D}}{A\vee B} \end{array}}\\ 
  {\begin{array}{c} \\ \inferrule*[right=I1]{\overline{x:A}}{A\vee B} \end{array}}\\
  {\begin{array}{c} \\ \inferrule*[right=I2]{ \overline{y:B}}{A\vee B} \end{array}}
   }{A\vee B} & = 
\end{array}
~
~End Vertical


## Bottom

~ Math 
\inferrule*[right=Elim]{\bot}{A}
~
~ Center
NO INTRO RULE
~

~ Center
local soundness: Trivial (No intro)

local completeness:
~

~ Math
  {\begin{array}{l c r}  \\ \inferrule*{\mathcal{D}}{\bot} & = & \inferrule*{\inferrule*{\mathcal{D}}{\bot}}{\bot} \end{array}} 
~




## Proof Trees To Terms (STLC): Contexts

* Proof trees transliterate to (one dimensional) proof terms constructions
of the simply typed lambda calculus as do equalities. 

* Labeled hypotheses become _typed variable contexts_ (scopes) which can be reflected freely
at any point in proof term constructions.
* Similarly to well typed program formation  in programming languages. Sequent construction
corresponds to type checking.

~ Math
\inferrule*{{\inferrule*{ }{x:int\vdash x:int}}\\{\inferrule*{ }{x:int\vdash 1:int}}}{x:int\vdash x+1:int}
~ 

##STLC : Contexts


~ Math
\inferrule*[right=Empty]{ }{\bullet \vdash {\sf ctx}}
~
~Math
\inferrule*[right= Cons] {\Gamma\vdash {\sf ctx}\\ \Gamma\vdash A {\sf\  Prop}\\ x\not\in Dom(\Gamma)  }
{\Gamma,x:A\vdash {\sf ctx}}
~ 

* As labels are "pluggable" tree slots, variables are substitutable for terms of 
appropriate type

* Similarly to typed arguments in a functions declaration.
* The substitution principle corresponds to proof tree composition :

$\Gamma,x:A\vdash N:B \text{\ and }\Gamma\vdash M:A \Longrightarrow \Gamma\vdash M[N/x]:B $ 

## CONJUNCTION AS PRODUCT
Introduction rule transliterates to:
~ Math
\inferrule*[right=Intro]{{\Gamma \vdash M: A}\\{\Gamma\vdash N: B}}{\Gamma \vdash \langle M, N \rangle : A\times B }
~

## CONJUNCTION AS PRODUCT

Similarly for elimination

~ Math
  \begin{array}{c }
  {\inferrule*[right=Elim1]
    {\Gamma\vdash  M : A\times B}
    {\Gamma\vdash fst(M):A}} \\ 
    \\
    {\inferrule*[right=Elim2]
    {\Gamma\vdash  M : A\times B}
    {\Gamma\vdash snd(M):B}}
   \end{array}
~

~ Begin Vertical

## CONJUNCTION HARMONY

The local soundness and completeness give the local reduction ($\beta$) 
and expansion ($\eta$) rules

 ~ Math
    \begin{array}{l c r}
  {\inferrule*[right=Elim]{\inferrule*[right=Intro] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A} 
  \end{array} } \\{\begin{array}{c}
  \mathcal{E} \\
  {B} 
  \end{array} }} {A\wedge B}}{A}} & = &   
   {\begin{array}{c}
  \mathcal{D}\\
  {A} 
  \end{array} }
  \end{array}
 ~ 

  ~ Math
   \Gamma\vdash fst (\langle M, N \rangle) =_{\beta} M: A
   ~ 
  And similarly 
  
~ Math
\Gamma\vdash snd (\langle M, N \rangle) =_{\beta} N:B
~

## Conjunction: Harmony

$\eta$ expansion is given analogously
Proof tree equality 
 ~ Math
\begin{array}{l c r}
   {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } & =  &  {\inferrule*[right=Intro]{{\inferrule*[right=Elim1] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } } {A}}\\
  {\inferrule*[right=Elim2] {
 {\begin{array}{c}
  \mathcal{D}\\
  {A\wedge B} 
  \end{array} } } {B}}}{A\wedge B}}
  \end{array}
  ~
translates to
~ Central
$\Gamma\vdash M = \langle fst(M), snd(M)\rangle :A \wedge B$
~

~ End Vertical

## Implication as function space

~ Math
  \begin{array}{c }
  {\inferrule*[right=Intro]
    {\Gamma,x:A\vdash  M : A}
    {\Gamma\vdash \lambda x:A. M:A\supset B}} \\ 
    \\
    {\inferrule*[right=Elim]
    {{\Gamma\vdash  M : A \supset B}\\
    {\Gamma\vdash N:A}}{\Gamma\vdash (MN):B}}
   \end{array}
~
Harmony gives the  $\beta\eta-$ equalities 
Similarly we obtain the whole equational system of the STLC

* $(\lambda x: A. M) N =_{\beta} M[N/x]$

* $f:A \supset B = \lambda x:A. f x$

## Disjunction as union 
~ Math
  \begin{array}{c }
  {\inferrule*[right=Intro1]
    {\Gamma\vdash  M : A}
    {\Gamma\vdash  inl^{B}(M):A\vee B}} \\ 
    \\
    {\inferrule*[right=Intro2]
    {\Gamma\vdash  M : B}
    {\Gamma\vdash inr^{A}(M):A\vee B}}
    \\
    \\
    {\inferrule*[right=Elim]{{\Gamma\vdash M:A\vee B}\\{\Gamma,x:A\vdash N:C}\\ {\Gamma,y:B\vdash O:C}} { {\Gamma}\vdash {\text{case }M \text{ of } inl( x)\longmapsto N  |\  inr (y)\longmapsto O : C}}}
   \end{array}
~

## Disjunction as union
Again the "meaning" of the terms is embedded in the equalities that witness harmony given by Gentzen's principles:
 e.g. ${ {\text{case } inl(M) \text{ of } inl( x)\longmapsto N  |\  inr (y)\longmapsto O = N[M/x]}}$


## Consistency Results
_Issue_: How do you show that this calculus does not prove $\bot$

Problem with straightforward induction on trees: Proofs are not canonical, no subformula property.

_Foundational Problem_: The meaning of a proposition depends on itself ($A$ depends on $B\supset A$ and $B$). 
 Circularity!.

__Verificationism to the rescue__: _The meaning of a connective is the set of its ~~proofs~~  verifications. Informally:
straightforward ways to prove it_



## Calculus of verifications (a.k.a normal forms)
Goal : Create a calculus in which  all proofs are "normal" 

A verification should be a proof that only analyzes the constituents of a proposition

Show that for every proof in natural deduction there is a unique verification -- $\beta\eta$ equal proofs
have the same verification. 

We create a "restricted" natural deduction for verifications and show that it is complete.

Proof technique: Gentzen's Cut elimination theorem or in PL terms Strong Normalization 


## Calculus of verifications
Two judgments 

* $A\uparrow$ can be read as "$A$ has a verification" or "$A$ is canonically proven"
* $A\downarrow$ can be read as "$A$ can be extracted  canonically (via elims) from assumptions", "$A$ has a canonical extraction".

Judgments have the forms:


~ Math
\begin{array}{c  c}
	{\begin{array}{c}
		{A_1\downarrow \ldots A_i\downarrow}  \\
		\vdots \\
		{A\uparrow}\end{array}} & {\begin{array}{c}
		{A_1\downarrow \ldots A_i\downarrow}  \\
		\vdots \\
		{A\downarrow}\end{array}}  
	\end{array} 
~
## Verifications: Basic Idea
One should think the arrows as directing (canonical) proof search. Intro rules guide search  bottom up, Elim rules guides search from top (assumptions) down. When arrows can meet we have  a normal proof.

__Canonicity applies Gentzen's principles directly__ 

* canonical proofs should not go through "roundabouts" (elim-after intro) 
i.e. the terms should not have $\beta$ redexes.

* assumptions are forced  to  a have certain shape based on their types (i.e. $\eta$ expansion) 


## Canonical Conjunction -- Truth
~ Math
  \inferrule*[]
  { {A \uparrow}\\{B\uparrow}} 
  { A\wedge B\uparrow}
~

~ Math
  \begin{array}{c c}
  {\inferrule*[]
  { {A \wedge B\downarrow}} 
  { A \downarrow}} &
  {\inferrule*[]
  { {A \wedge B\downarrow}} 
  {  B\downarrow}}
  \end{array}
~

~ Math
	\inferrule*{ }{\top\uparrow} 
~

## Hypotheses
~ Math
  \inferrule*[right=Atomic Hyp]
  {x:P_i\downarrow } 
  {P_i\uparrow }
~
The reflection can be restricted only to atomic formulas. 
This way the proof of consistency also "justifies" $\eta$ equality (global completeness). 


The general rule below is _admissible_ and the recipe of the proof essentially applies $\eta$-expansion principles based on the structure
of $A$:

~ Math
  \begin{array}{c}
  \inferrule*[vdots=1.5em]
  {x:A\downarrow } 
  {}
  \\
  \inferrule*{}{A\uparrow}
  \end{array}
~

## Canonical Implication 

~ Math
  \begin{array}{c}
 {\inferrule* {
 {\begin{array}{c}
  x_1:A_1\downarrow \ldots \overline{x:A\downarrow}\\
  \vdots \\
  {B\uparrow} 
  \end{array} } } {A\supset B\uparrow}} 
 \\
 \\
 {\inferrule* {
 {\begin{array}{c}
  {A\supset B\downarrow} 
  \end{array} }\\ {\begin{array}{c}
  {A\uparrow} 
  \end{array} } } {B\downarrow}}
 \end{array}
~


## Examples
Here are the (two) verifications  of $P\supset( P\supset P)$

~ Math
	\inferrule*[right=$\supset^{x}$]
	{\inferrule*[right=$\supset^{y}$]{
			{} \\{\inferrule*[right=Refl$^{y}$]{\overline{x:P},\overline{y:P}\downarrow}
				{y:P\uparrow}}}{P\supset P}}
	{P\supset(P\supset P)}
~

~ Math
	\inferrule*[right=$\supset^{x}$]
	{\inferrule*[right=$\supset^{y}$]{
			{} \\{\inferrule*[right=Refl$^{x}$]{\overline{x:P},\overline{y:P}\downarrow}
				{x:P\uparrow}}}{P\supset P}}
	{P\supset(P\supset P)}
~
Corresponding to $\lambda x:P.\lambda y:P. y$ and $\lambda x:P.\lambda y:P. x$

## Absurd
If $\bot$ is extracted it proves anything.
~ Math
\inferrule*{\bot\downarrow}{A\uparrow}
~

## Properties : Soundness w.r.t Nat Deduction




*  Any (tree) judgment of shape $\Gamma\downarrow\  \vdash A\uparrow$ 
is trivially a natural deduction (tree) judgment $\Gamma \vdash {\sf A \ true}$ 
 (via forgetful inclusion)

* Any judgment $\Gamma\ \downarrow\ \vdash A\downarrow$ is trivially a natural deduction judgment 
$\Gamma \vdash {\sf A\  true}$
     (similarly)

## Properties: Completeness w.r.t Nat Deduction

~ Math
  \begin{array}{c c}
{\inferrule*[right=Coercion]{A\uparrow}{A\downarrow}} & {\inferrule*{A\downarrow}{A\uparrow}}
\end{array}
~

* Adding coercion and unrestricted reflection ($\Gamma\downarrow\ \vdash^{+}$ ) trivially gives completeness. 

* Coercion permits for trees where a connective is introduced only to be eliminated which were initially banned for verifications ( equivalently lambda terms with $\beta$-redexes)

* For every tree $\mathcal{D}$ : $\Gamma\vdash A \ {\sf true}$ there exists
	a $\mathcal{\overline{D}} : \Gamma\downarrow\vdash^{+} A\uparrow$
(trivially)

* Unrestricted reflection is admissible as we sketched.

*	__Goal__ : Show admissibility of coercion as well

## Properties: Completeness w.r.t Nat Deduction

We want to show:

~ Math
\Gamma\downarrow\ \vdash^{+}A\uparrow \ \equiv\  \Gamma\downarrow\ \vdash A\uparrow
~ 

Induction in bi-directional trees is inconvenient.

But we have another trick : Sequent Calculus! 


Under Curry -- Howard analysis,  sequent calculus is not yet another  axiom system but an (one-dimensional) encoding of canonical annotated deductions!
{ margin-right:2em; \
  padding:1.0em; \
  background-color:floralwhite; \
  background-clip: padding-box; \
  border: 0.5ex solid black; \
  border-radius: 4ex; \
  width: 22.2em;\
}


## Completeness Via Sequent Calculus

~ Central
__Main Ideas__
~

* Extraction rules (downwards from hypotheses via elim) are embedded to left rules

* Verifications (upwards for canonical proof search via intro) become right rules.

*  Sequents of the form $\Gamma\Rightarrow A$ are declarations of trees of shape $\Gamma\downarrow\Rightarrow A\uparrow$

## Sequent calculus from annotations

~ Math
	\inferrule*{ }{\Gamma,P\Rightarrow P}
~
~ Math
\inferrule*{{ \Gamma\Rightarrow A}\\{\Gamma\Rightarrow B}}{\Gamma\Rightarrow A\wedge B}
~
~ Math
\begin{array}{c c}{\inferrule*{\Gamma,A \Rightarrow C}{\Gamma,A\wedge B\Rightarrow C}} &{\inferrule*{\Gamma,B \Rightarrow C}{\Gamma,A\wedge B\Rightarrow C}}\end{array}
~

~ Math
\begin{array}{c c}{\inferrule*{\Gamma,A \Rightarrow B}{\Gamma \Rightarrow A\supset B}} &{\inferrule*{{\Gamma,A\supset B,B \Rightarrow C}\\{\Gamma,A\supset B\Rightarrow  A}}{\Gamma,A\supset B\Rightarrow C}}\end{array}
~

~ Math
\begin{array}{c c}{\inferrule*{ }{\Gamma\Rightarrow \top}} &{\inferrule*{ }{\Gamma,\bot\Rightarrow C}}\end{array}
~

~ Slide

Finally we show:
	
  * $\Gamma\downarrow\ \vdash A\uparrow\  \equiv \  \Gamma\Rightarrow  A$ (induction)

  * $\Gamma\downarrow \vdash^{+} A\uparrow \ \equiv\ \Gamma \Rightarrow^{+} A$

  *  $\Rightarrow^{+}$ is $\Rightarrow$ adjoint with:

  * $\inferrule*[right=Cut]{{\Gamma\Rightarrow A}\\{\Gamma,A\Rightarrow C}}{\Gamma \Rightarrow C}$ 

  * Coercion corresponds to Cut Rule

  * Cut elimination shows $\Gamma\Rightarrow^{+} A \ \equiv \Gamma\Rightarrow A $ (proof by nested induction)

  * As a result coercion is admissible

  * And, all natural deduction proof trees have a  unique normal form

  * To show admissibility of Coercion we show admissibility of Cut instead.
~

## Merits of CHI

*  Separating judgments and propositions, defining connectives orthogonally, reading logic operationally 
are  key concepts.

* It scales (together with its proof techniques)! (e.g. calculi for linear logic, Modal logics, Substructural logics etc)

* Fits the bill for "logic as an operating system running many different application"

* Gives programming languages principles for free!


## My work

  * What is the type system for logical necessity ?
  * What is the (basic) logic of language interfacing ?
  * Can we have a calculus that handles concepts module interfaces
  and captures the notion of ``separate compilation" i.e. a logic of modular binding ?
  * Idea: a system relating two calculi



## Roadmap

* Create a system with two kinds of judgments $A \ {\sf true}$ and $A\  {\sf valid}:=\  \llbracket A \rrbracket {\sf true}$ and treat necessity
as "double theoremhood"  
* obtain a system of basic constructive modality (necessity) investigating the minimal relation
between these two systems 
* Read $\llbracket \cdot\rrbracket$ as an anonymous function (or, better, functor) and 
axiomatize validity $\llbracket \sf {judgments}\rrbracket$. 


## Modal Rule

One modal rule for elimination and introduction to relate judgments $A\  {\sf valid}$, $ A\ {\sf true}$, $ \Box A {\sf true}$: 

~ Math
  
  \inferrule* {{\Box A} \\  {\inferrule* {}{{\begin{array}{c}
  \overline{x:A}  \\
  \vdots \\
  {B} 
  \end{array} } \\ {\begin{array}{c}
  \overline{s:\llbracket A  \rrbracket} \\
  \vdots \\
  \llbracket B \rrbracket  
    \end{array}}  }}}
    {\Box B}
 ~ 
## Modal Rule (Generically)

Or, generalizing for assumptions 

$\Gamma:=x_1:A_1, \ldots, x_i: A_i\  \text{and } \Delta:= s_1:\llbracket A_i \rrbracket, \ldots 
s_i:\llbracket A_i\rrbracket$: 



~ Math
  
  \inferrule* {{\Box A_1, \ldots,  \Box A_i} \\  {\inferrule* {}{{\begin{array}{c}
  \overline{\Gamma}  \\
  \vdots \\
  {B} 
  \end{array} } \\ {\begin{array}{c}
  \overline{\Delta} \\
  \vdots \\
  \llbracket B \rrbracket  
    \end{array}}  }}}
    {\Box B}
 ~ 


## Modal Rule ($\Box$ Introduction)
We defined the connective negatively but we obtain  $\Box$ constuctors by the very same rule for $\Gamma,\Delta$ empty
and derivations $\mathcal{\overline{D},\overline{E}}$ closed for substitutions.
~ Math
  \inferrule* {{\inferrule* {}{{\begin{array}{c}
  \mathcal{\overline{D}}  \\
  {B} 
  \end{array} } \\ {\begin{array}{c}
\mathcal{\overline{E}} \\
  \llbracket B \rrbracket  
    \end{array}}  }}}
    {\Box B}
~



## Local Soundness: elim rule is not too strong

For $\mathcal{\overline{D},\overline{E}}$ closed for substitutions, the first proof tree is reducible to the second:
~ Math
\begin{array}{l r}
 \inferrule*{ 
  \inferrule* {{\inferrule* {}{{\begin{array}{c}
  \mathcal{\overline{D}}  \\
  {A} 
  \end{array} } \\ {\begin{array}{c}
\mathcal{\overline{E}} \\
  \llbracket A \rrbracket  
    \end{array}}  }}}
    {\Box A}\\{{\inferrule* {}{{\begin{array}{c}
  \overline{x:A}  \\
  \vdots \\
  {B} 
  \end{array} } \\ {\begin{array}{c}
  \overline{s:\llbracket A  \rrbracket} \\
  \vdots \\
  \llbracket B \rrbracket  
    \end{array}}  }}}}{\Box B} & \Longrightarrow 
    \end{array}
~
~Math
  \inferrule*  {{\inferrule* {}{{\begin{array}{c}
  \mathcal{\overline{D}}\\
  \overline{A}  \\
  \vdots \\
  {B} 
  \end{array} } \\ {\begin{array}{c}
  \mathcal{\overline{E}}\\
  \overline{\llbracket A  \rrbracket} \\
  \vdots \\
  \llbracket B \rrbracket  
    \end{array}}  }}}{\Box B}

 ~ 

## Local Completeness
Any deduction $\mathcal{D}: \Box A$ can be expanded as follows:

~ Math
  
\begin{array} {c r}
\begin{array}{c}
  \mathcal{D}\\ 
   \Box A
\end{array} & \Longrightarrow \\
\\
\inferrule* {{\begin{array}{c}
  \mathcal{D}\\
   \Box A 
  \end{array} } \\ {\begin{array}{c}
                      \\
                      \overline{x:A}
                      \end{array}} \\ {{\begin{array}{c}
                      \\
                      \overline{s:\llbracket A\rrbracket}
                      \end{array}}}
                      }{\Box A}
\end{array}
~
## Proof term Assignment( ${\sf  Prop_1 }$)
${\sf let}$ bindings in functional programming compute by combining unification and substitution. 
For example  given the function:

``` Haskell
def shift (p:Point) = 
     let  <x,y> be p
     in
     <x+1,y+1>
```
calling this function with argument the point $\langle 3,5\rangle$  will return $\langle 4,6 \rangle$ by pattern matching 
$\langle 3,5\rangle$ against $\langle x,y \rangle$.

## Proof term Assignment( ${\sf  Prop_1 }$)
Instances of the rule with empty (eliminating zero boxes), and singleton (eliminating one box) contexts.
~ Math
\begin{array}{c}
\inferrule*[]{ {\Gamma\in{\sf Prop_1}}\\{\vdash { M:B}}\\{  \vdash {{\sf J}:\llbracket  B\rrbracket} }} { {\Gamma}\vdash {  M\& {\sf J}:\Box  B}}
\\
\inferrule*[]{{  {\Gamma}\vdash {N:\Box  A}}\\{ {x:A}\vdash { M:B}}\\{{s:\llbracket A \rrbracket}\vdash {{\sf J}:\llbracket  B\rrbracket} }} { {\Gamma}\vdash {{\sf let} \ (x\& s \ \ {\sf be\ } N) \ {\sf in}\  (M\& {\sf J}):\Box  B}}
\end{array}
~ 
## Proof term Assignment( ${\sf  Prop_1 }$)
Or, generically, for arbitrary number of boxes:
~ Math
\begin{array}{l}
	\inferrule*
	{{\forall A_k \in \Gamma^\prime . \   \Gamma \vdash N_k:\Box A_k}\\
	{ {\Gamma^\prime}\vdash {M:B}}\\{ {\llbracket\Gamma^\prime\rrbracket}\vdash {{\sf J}:\llbracket B \rrbracket} }} 
	{ {\Gamma} \vdash {{\sf let^{*}}\ (\Gamma^\prime, \llbracket\Gamma^\prime\rrbracket, Ns) \ {\sf in}  \ ( M\& {\sf J}):\Box B}}
\end{array}
~
With : 
~ Math
\begin{array}{l}
\nonumber {\sf let}^{*}\ (\circ;\ \circ;\  [\ ]) {\ \sf in\ }  M:= M \ \\
\nonumber {\sf let}^{*}\ (x_1:A_1,\ldots, x_i:A_i\ ;\  s_1: \llbracket A_1\rrbracket, \ldots, s_i:\llbracket A_i\rrbracket;\  N_1,\ldots,  N_i)  \\
{\ \sf in\ } M \\:= \\
\ {\sf let} \ \{(x_1 \& s_1)\  {\sf be}\  N_1,\ldots,  (x_i \& s_i)\  {\sf be}\  N_i\}\ {\sf in}\  M \\
\end{array}
~


## Proof term Assignment( ${\sf  Prop_1 }$)
 * With the reduction rule coming straight from  Gentzen reduction  principle:

~ Math
\begin{array}{ll} 
	{\sf let} \{(x_1 \& s_1) {\ \sf be\ } (M_1\& {\sf J_1}),\ldots,  (x_i \& s_i) {\ {\sf be}\ } (M_i\& {\sf J_i})\}\ {\sf in}\  (M \&  {\sf J})& \\
	=_{\beta} & \\
  {  M[M_1/x_1, \ldots,  M_i/x_i] \& {\sf J}[{\sf J_1}/s_1,\ldots, {\sf J_i}/s_i]}
	\end{array}
~

* And similarily for $\eta$ expansion:
$M:\Box A =_{\eta}\ \ {\sf let} \ \ (x \& s\  {\sf be} \ M)\ \ {\sf in}\ \  { (x \& s)}:\Box A$

* With these equalities we can move on and show  strong normalization  and confluence results.

# An Application

## Dynamic linking and module mechaninsms
* Consider a language $I$ (_source_) interfacing a language $J$ (_target_) via  declared in a signature.

*  We assume that the two languages share
some basic types e.g. ${\sf int}$ (e.g $\llbracket int_I\rrbracket = int_J $) 
and for simplicity, that $J$  is based on  lambda calculus so it is functionally complete 
 under the obvious interpretation  $\llbracket A\rightarrow_I B\rrbracket =\llbracket A \rrbracket \rightarrow_J \llbracket B \rrbracket $ 
* For simplicity we can also assume that $I, J$ are the same (e.g. module definitions within a language)

## 
A typical  interface for a __stack__  will be declared as follows:

``` Haskell
    using type intstack
      empty: intstack
      push: int -> intstack -> intstack
      pop: intstack -> int x intstack
```

Source expressions in such a setting have a dynamic meaning depending on the target implementations. Take  the expression: 
```Haskell
pop (push (1+1) empty)
```

This program involves two kinds of computations: a redex $(1+1)$ that can be reduced using the internal semantics 
of the language ($1+1\rightsquigarrow_{I} 2$) and the signature calls  ${\sf push, pop}$

## Dynamic linkers
* A __dynamic linker__ is a _metaprogramming_ construct  that consumes a type correct 
implementation of the signature and produces a type correct residual program sensitive to
the implementation. Our calculus, is a calculus of such constructions. 

* In the following we consider ${\sf \Sigma}$ to be the signature of the interface. 
Here are the steps towards the dynamic linker construction for the expression .

## Dynamic linkers
* Reduce the source code based on the operational semantics of $I$ until it doesn't have a redex:


${\sf \Sigma}; {\sf \circ {\vdash pop (push \ (1+1) \ Empty)\rightsquigarrow pop (push \ 2 \ Empty) :int}}$

* Contextualize the use of the signature at the final term in step $1$:
~ Math 
 \begin{array}{c c}
{\sf \Sigma;}&  {\sf x_1:intstack,  x_2:int\rightarrow intstack\rightarrow int\times intstack,}\\
&  {\sf x_3:intstack\rightarrow int \vdash   x_3 (x_2 \ 2\  x_1):int} 
\end{array}
~
* Rewrite the previous judgment assuming abstract foreign implementations for the corresponding 
missing elements.

~ Math 
\begin{array}{c}
{\sf s_1:\llbracket intstack\rrbracket,  s_2:\llbracket int\rightarrow intstack\rightarrow intstack\rrbracket},\\
{\sf s_3:\llbracket intstack\rightarrow int\times intstack \rrbracket \vdash   s_3 * (s_2 * \ \bar{2}\ * s_1):\llbracket int\rrbracket} 
\end{array}
~



## Dynamic Linkers

* Merge the two judgments to construct a dynamic linker that consumes
assignments of the signature elements  and outputs the assignment of the whole expression
dynamically.

~ Math
\begin{array}{l}
{\sf \Sigma}; {\sf {x_1^{\prime}:\Box intstack ,x_2^{\prime}:\Box(int\rightarrow intstack\rightarrow intstack)}},\\
   {\sf x_3^{\prime}: \Box  (intstack\rightarrow int\times instack)}\vdash \\
		{\sf  let\{ x_1\& s_1 {\ \sf be \ } x_1^{\prime},
         \ x_2\& s_2 {\ \sf be \ } x_2^{\prime}, \  x_3\& s_3 
         {\ \sf be \ } x_3^{\prime} \}\  in}\ \\   
         \mathtt{(x_3 (x_2\ 2 \ x_1)\ \& \ s_3*(s_2* \bar{2}*s_1)):\Box int} 
\end{array}
~

## Dynamic Linkers
* Which gives by $\lambda$ abstractions:
~Math 
\begin{array}{l l}
\mathtt{\lambda x_1^{\prime}.\  \lambda x_2^{\prime}. \lambda x_3^{\prime}}. \\
           		{\sf  let\{ x_1\& s_1 {\ \sf be \ } x_1^{\prime},
         \ x_2\& s_2 {\ \sf be \ } x_2^{\prime}, \  x_3\& s_3 
         {\ \sf be \ } x_3^{\prime} \}\  in}\ \\   
         \mathtt{(x_3 (x_2\ 2 \ x_1)\ \& \ s_3*(s_2* \bar{2}*s_1)):}\\
             {\sf \Box(intstack)\rightarrow 
              \Box(int\rightarrow intstack\rightarrow intstack)} \\
             {\sf \rightarrow \Box (intstack\rightarrow int\times intstack) \rightarrow \Box int}
\end{array}
~

## Dynamic Linkers

* Such a program behaves correctly consuming __only__ conforming  implementations of the interface
and calculating the program's different "futures" with respect to different implementations.

* E.g. with an array implementation we get :
~ Math  
  \begin{array}{l}
  { \sf create\_array(): intarray} \ \  \text{for}\ \ {\sf empty}\\
    {\sf add\_array: int \rightarrow intarray\rightarrow intarray}\ \  \text{for} \ \ {\sf push}\\
  {\sf remove\_last: intarray\rightarrow intarray\times int }\  \text{for}\  {\sf pop}
  \end{array}
~




## Dynamic Linkers
Which are conforming with the signature under the interpretation:
~ Math 
  \begin{array}{l}
  \llbracket {\sf intstack} \rrbracket:= {\sf intarray} \\  
  \llbracket {\sf int \rightarrow intstack\rightarrow instack } \rrbracket:= {\sf int \rightarrow intarray\rightarrow intarray} \\
  \llbracket {\sf intstack \rightarrow (int \times intstack)} \rrbracket:= {\sf int\rightarrow (int\times intarray)}\\
  \end{array}
~
Hence we obtain values of $\Box$ types (assignments):
~ Math  
  \begin{array}{l}
  { \sf empty \& \  create\_array():\Box intstack} \\
    {\sf  push \&\  add\_array  :\Box (int \rightarrow intstack\rightarrow intstack)}\\
  {\sf  pop   \&\  remove\_last: \Box (intarray\rightarrow intarray\times int)}
  \end{array}
~
## Dynamic Linkers
* If we apply these values to the dynamic linker we obtain the assignment for the whole expression:
after reducing all redexes ($\lambda$ and ${\sf let}$):
~ Math
\begin{array}{l l}
{\sf pop (push\ 2 \ empty)} \&  \\
  {\sf remove\_last*(add\_array*\ 2 * create\_array())}
\end{array}
~

* As required in systems with separate compilation, the same process will compute a different residual
 with a different set of  conforming implementations 

## Dynamic Linkers

* E.g.  with ${\sf \llbracket intstack\rrbracket := intlist}$ 
and the conforming implementation 
~ Math  
  \begin{array}{l}
  { \sf [ \ ]: intlist} \ \  \text{for}\ \ {\sf empty}\\
    {\sf Cons: int \rightarrow intlist\rightarrow intlist}\ \  \text{for} \ \ {\sf push}\\
  {\sf pop\_list: intlist\rightarrow intlist\times int }\  \text{for}\  {\sf pop}
  \end{array}
~
the linker will compute a different "future" for the program i.e.  
~Math
 \begin {array}{l}
{\sf pop (push\ 2 \ empty)} \&  \\
  {\sf pop\_list*(Cons*\ 2 * [\ ])}
\end{array}
~

## Full system
* ($\llbracket\cdot\rrbracket$) axiomatization via justification logic
* correspondence with basic $K$ intutionistic modal logic

## Categorical semantics  and future work
![closed] 

Necessity read as "double truth under an interpretation" ($\llbracket \rrbracket$)
corresponds to the logic of __applicative functors__ (simply put: functors that preserve products and 
map function application in a "sensible" way)

## More logics?
* The passing to category theory is useful to find possible extensions of the logic with practical 
applications (e.g. passing control to an external language and returning back to the source )
* KT modal logic with morphisms $\Box A \rightarrow A $
* Modal logic for adjunctions and monads?


[closed]: images/closed.png "closed" { width:auto; max-width:90% }

## Related work
[Moggi:1989:CLM:77350.77353]

## Thanks for looking
